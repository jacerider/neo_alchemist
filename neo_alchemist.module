<?php

/**
 * @file
 * Primary module hooks for Neo | Alchemist module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\media_library\MediaLibraryState;
use Drupal\neo_alchemist\Plugin\Field\FieldTypeOverride\StringItemOverride;

/**
 * Implements hook_field_info_alter().
 */
function neo_alchemist_field_info_alter(array &$info): void {
  // if (!empty($info['file'])) {
  //   $info['file']['class'] = FileItemOverride::class;
  // }
  // if (!empty($info['file_uri'])) {
  //   $info['file_uri']['class'] = FileUriItemOverride::class;
  // }
  // if (!empty($info['image'])) {
  //   $info['image']['class'] = ImageItemOverride::class;
  // }
  // if (!empty($info['link'])) {
  //   $info['link']['class'] = LinkItemOverride::class;
  // }
  // if (!empty($info['list_integer'])) {
  //   $info['list_integer']['class'] = ListIntegerItemOverride::class;
  // }
  // if (!empty($info['path'])) {
  //   $info['path']['class'] = PathItemOverride::class;
  // }
  if (!empty($info['string'])) {
    $info['string']['class'] = StringItemOverride::class;
  }
  // if (!empty($info['string_long'])) {
  //   $info['string_long']['class'] = StringLongItemOverride::class;
  // }
  // if (!empty($info['text'])) {
  //   $info['text']['class'] = TextItemOverride::class;
  // }
  // if (!empty($info['uuid'])) {
  //   $info['uuid']['class'] = UuidItemOverride::class;
  // }
  // if (!empty($info['uri'])) {
  //   $info['uri']['class'] = UriItemOverride::class;
  // }
}

/**
 * Implements hook_field_widget_single_element_WIDGET_TYPE_form_alter().
 *
 * @see \Drupal\neo_alchemist\MediaLibraryXbPropOpener
 */
function neo_alchemist_field_widget_single_element_media_library_widget_form_alter(array &$form, FormStateInterface $form_state, array $context): void {
  // Use an XB-specific media library opener, because the default opener assumes
  // the media library is opened for a field widget of a field instance on the
  // host entity type. That is not true for XB's "static prop sources".
  // @see \Drupal\neo_alchemist\PropSource\StaticPropSource
  // @see \Drupal\neo_alchemist\Form\ComponentPropsForm::buildForm()
  if ($form_state->get('neo_component_static') !== TRUE) {
    return;
  }

  // @see \Drupal\media_library\Plugin\Field\FieldWidget\MediaLibraryWidget::formElement()
  assert(array_key_exists('open_button', $form));
  assert(array_key_exists('#media_library_state', $form['open_button']));
  $old = $form['open_button']['#media_library_state'];
  assert($old instanceof MediaLibraryState);
  $form['open_button']['#media_library_state'] = MediaLibraryState::create(
    'neo_alchemist.media_library.opener',
    $old->getAllowedTypeIds(),
    $old->getSelectedTypeId(),
    $old->getAvailableSlots(),
    [
      // This single opener parameter is necessary.
      // @see \Drupal\neo_alchemist\MediaLibraryXbPropOpener::getSelectionResponse()
      'field_widget_id' => $old->getOpenerParameters()['field_widget_id'],
    ]
  );
  // $form['default'] = [
  //   '#type' => 'checkbox',
  //   '#title' => t('Hide Default Image'),
  //   // '#default_value' => empty($form['#value']),
  //   '#access' => empty(Element::children($form['selection'])) && empty($form['#required']),
  // ];
}

// /**
//  * Implements hook_preprocess_media_library_item__widget().
//  *
//  * @todo Is taken from Experience Builder.
//  *
//  * Retrieves the typed data contained by the selected Media entity (if it uses
//  * an `image` media source), and makes it available to the XB UI as a
//  * `data-media-file` attribute.
//  *
//  * @see media_library_storage_prop_shape_alter()
//  * @todo Revisit in https://www.drupal.org/project/neo_alchemist/issues/3463842
//  */
// function neo_alchemist_preprocess_media_library_item__widget(array &$variables): void {
//   $media_id = $variables['element']['remove_button']['#media_id'] ?? NULL;
//   $string_split = 'media-library-remove-button-';
//   $offset = strpos($variables['element']['remove_button']['#name'], $string_split) + strlen($string_split);
//   $associated_field_name = substr($variables['element']['remove_button']['#name'], $offset);
//   $variables['content']['remove_button']['#attributes']['data-media-field-name'] = $associated_field_name;
//   if ($media_id) {
//     $media = Media::load($media_id);
//     if (is_null($media)) {
//       return;
//     }
//     $field = $media->get('field_media_' . $media->bundle());
//     $fid = $field->getValue()[0]['target_id'];
//     $media_file = File::load($fid);
//     $value = $field->getValue()[0];
//     if (is_null($media_file) || is_null($value)) {
//       return;
//     }
//     // For now, this only supports image media.
//     // @see media_library_storage_prop_shape_alter()
//     if ($media->bundle() !== 'image') {
//       return;
//     }
//     $prepared = array_intersect_key([
//       ...$value,
//       // @todo Figure out how to remove these hard-coded assumptions in https://www.drupal.org/project/experience_builder/issues/3463842 â€” this is assuming `type: string, format: uri-reference` (or more specifically: `$ref: json-schema-definitions://neo_alchemist.module/image-uri`)
//       'src' => $media_file->createFileUrl(),
//     ], ['src' => '', 'alt' => '', 'width' => '', 'height' => '']);

//     $variables['content']['remove_button']['#attributes']['data-media-file'] = Json::encode($prepared);
//   }
// }

/**
 * Implements hook_entity_type_alter().
 */
function neo_alchemist_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach ($entity_types as $entityType) {
    if ($entityType instanceof ContentEntityTypeInterface && $entityType->hasLinkTemplate('canonical')) {
      $canonical = $entityType->getLinkTemplate('canonical');
      $entityType->setLinkTemplate('alchemist', $canonical . '/alchemist');
    }
  }
}
